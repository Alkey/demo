/*
 * This file is generated by jOOQ.
 */
package jooq.tables.records;


import jooq.tables.Line;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LineRecord extends UpdatableRecordImpl<LineRecord> implements Record4<Long, String, String, Double> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.line.id</code>.
     */
    public LineRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.line.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.line.name</code>.
     */
    public LineRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.line.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.line.geometry</code>.
     */
    public LineRecord setGeometry(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.line.geometry</code>.
     */
    public String getGeometry() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.line.length</code>.
     */
    public LineRecord setLength(Double value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.line.length</code>.
     */
    public Double getLength() {
        return (Double) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Double> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, String, String, Double> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Line.LINE.ID;
    }

    @Override
    public Field<String> field2() {
        return Line.LINE.NAME;
    }

    @Override
    public Field<String> field3() {
        return Line.LINE.GEOMETRY;
    }

    @Override
    public Field<Double> field4() {
        return Line.LINE.LENGTH;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getGeometry();
    }

    @Override
    public Double component4() {
        return getLength();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getGeometry();
    }

    @Override
    public Double value4() {
        return getLength();
    }

    @Override
    public LineRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public LineRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public LineRecord value3(String value) {
        setGeometry(value);
        return this;
    }

    @Override
    public LineRecord value4(Double value) {
        setLength(value);
        return this;
    }

    @Override
    public LineRecord values(Long value1, String value2, String value3, Double value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LineRecord
     */
    public LineRecord() {
        super(Line.LINE);
    }

    /**
     * Create a detached, initialised LineRecord
     */
    public LineRecord(Long id, String name, String geometry, Double length) {
        super(Line.LINE);

        setId(id);
        setName(name);
        setGeometry(geometry);
        setLength(length);
    }
}
